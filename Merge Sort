void merge(vector<int> &arr, int s, int e){

    int mid = s+(e-s)/2;

    int len1 = mid-s+1;
    int len2 = e-mid;

    int* arr1 = new int[len1];
    int* arr2 = new int[len2];

    for(int i=0; i<len1; i++){
        arr1[i] = arr[s+i];
    }

    for(int i=0; i<len2; i++){
        arr2[i] = arr[mid+1+i];
    }

    int i = 0;
    int j = 0;
    int index = s;

    while(i<len1 && j<len2){

        if(arr1[i] > arr2[j]){
            arr[index] = arr2[j];
            index++;
            j++;
        }
        else{
            arr[index] = arr1[i];
            index++;
            i++;
        }
    }

    while(i<len1){
        arr[index] = arr1[i];
        index++;
        i++;
    }

    while(i<len2){
        arr[index] = arr2[j];
        index++;
        j++;
    }

    delete []arr1;
    delete []arr2;

}
void sort(vector<int> &arr, int s, int e){

    if(s>=e){
        return;
    }

    int mid = s+(e-s)/2;

    sort(arr, s, mid);
    sort(arr, mid+1, e);

    merge(arr, s, e);
}

void mergeSort(vector < int > & arr, int n) {
    // Write your code here.

   int s = 0;
   int e = n-1;

   sort(arr, s, e); 

}
