int firstPosition(vector<int>& arr, int n, int k){
    int start = 0;
    int end = n-1;
    int mid;
    int first = -1;

    while(start<=end){
        mid = start + (end-start)/2;

        if(arr[mid] == k){
            first = mid;
            end = mid-1;
        }
        else if(arr[mid]>k){
            end = mid-1;
        }
        else{
            start = mid+1;
        }
    }

    return first;
}

int lastPosition(vector<int>& arr, int n, int k){
    int start = 0;
    int end = n-1;
    int mid;
    int last = -1;

    while(start<=end){
        mid = start + (end-start)/2;

        if(arr[mid] == k){
            last = mid;
            start = mid+1;
        }
        else if(arr[mid]>k){
            end = mid-1;
        }
        else{
            start = mid+1;
        }
    }

    return last;
}

pair<int, int> firstAndLastPosition(vector<int>& arr, int n, int k)
{
    // Write your code here

    pair<int, int> ans;

    ans.first = firstPosition(arr, n, k);
    ans.second = lastPosition(arr, n, k);

    return ans;

}
