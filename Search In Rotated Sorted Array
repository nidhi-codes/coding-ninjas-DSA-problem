
int pivotIndex(vector<int>& arr, int n){

    int start = 0;
    int end = n-1;
    int mid;

    while(start<end){
        mid = start + (end-start)/2;

        if(arr[mid] >= arr[end]){
            start = mid+1;
        }
        else{
            end = mid;
        }
    }
    return start;
}

int binarySearch(vector<int>& arr, int start, int end, int k){

    int mid;

    while(start<=end){
        mid = start + (end-start)/2;

        if(arr[mid] == k){
            return mid;
        }
        else if(arr[mid] > k){
            end = mid-1;
        }
        else{
            start = mid+1;
        }
    }

    return -1;
}


int search(vector<int>& arr, int n, int k)
{
    // Write your code here.
    // Return the position of K in ARR else return -1.

        
    int pivot = pivotIndex(arr, n);

    if(k >= arr[pivot] && k <= arr[n-1]){
        return binarySearch(arr, pivot, n-1, k);
    }

    return binarySearch(arr, 0, pivot-1, k);

}
