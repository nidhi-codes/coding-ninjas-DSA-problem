/*************************************************************
    Following is the Binary Tree node structure

    template <typename T>
    class BinaryTreeNode
    {
    public:
        T data;
        BinaryTreeNode<T> *left, *right;
        BinaryTreeNode() : data(0), left(NULL), right(NULL) {}
        BinaryTreeNode(T x) : data(x), left(NULL), right(NULL) {}
        BinaryTreeNode(T x, BinaryTreeNode<T> *left, BinaryTreeNode<T> *right) : data(x), left(left), right(right) {}
    };

*************************************************************/

BinaryTreeNode<int>* deleteNode(BinaryTreeNode<int>* root, int x) {
    if(root == NULL){
        return root;
    }
    

    // Search for the node to be deleted
    if(root->data > x){
        root->left = deleteNode(root->left, x);
    } 
    
    else if(root->data < x){
        root->right = deleteNode(root->right, x);
    }
    
    else{ 
        
        // Node found, need to delete it
        // Case 1: No child or only one child
        if(root->left == NULL){
            BinaryTreeNode<int>* temp = root->right;
            delete root;
            return temp;
        } 
        
        else if(root->right == NULL){
           BinaryTreeNode<int>* temp = root->left;
            delete root;
            return temp;
        }


        // Case 2: Node with two children
        // Find the inorder successor (smallest node in the right subtree)
        BinaryTreeNode<int>* succ = root->right;
        while(succ->left != NULL){
            succ = succ->left;
        }

        // Copy the inorder successor's data to this node
        root->data = succ->data;

        // Delete the inorder successor
        root->right = deleteNode(root->right, succ->data);
    }
    
    
    return root;
}
