/********************************************************************

    Following is the representation of the Singly Linked List Node:

    class node{
        public:
            int data;
            node * next;
            node(int data){
                this->data=data;
                this->next=NULL;
            }
    };
    
********************************************************************/

node* middleNode(node* head){

        node* slow = head;
        node* fast = head->next;

        while(fast && fast->next){
            slow = slow->next;
            fast = fast->next->next;
        }

        return slow;

}

node* merge(node* left, node* right){

        if(left == NULL){
            return right;
        }

        if(right == NULL){
            return left;
        }

        node* dummy = new node(0);
        node* temp = dummy;

        while(left && right){
            if(left->data < right->data){
                temp->next = left;
                temp = left;
                left = left->next;
            }
            
            else{
                temp->next = right;
                temp = right;
                right = right->next;
            }
        }

        while(left){
            temp->next = left;
            temp = left;
            left = left->next;
        }

        while(right){
            temp->next = right;
            temp = right;
            right = right->next;
        }

        return dummy->next;

}

node* mergeSort(node *head) {
    // Write your code here.

        if(head == NULL || head->next == NULL){
            return head;
        }

        node* mid = middleNode(head);
        node* left = head;
        node* right = mid->next;
        mid->next = NULL;

        left = mergeSort(left);
        right = mergeSort(right);

        node* ans = merge(left, right);

        return ans;
}
