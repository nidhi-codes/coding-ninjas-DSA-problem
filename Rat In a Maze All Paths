#include <bits/stdc++.h>

using namespace std;

bool pathExist(vector<vector<int>>& m, vector<vector<int>>& visited, int x1, int y1, int n) {
    if (x1 >= 0 && y1 >= 0 && x1 < n && y1 < n) {
        if (m[x1][y1] == 1 && visited[x1][y1] == 0) {
            return true;
        }
    } 
    else {
        return false;
    }
}

void recursion(vector<vector<int>>& m, vector<vector<int>>& ans, vector<vector<int>>& visited,  int x, int y, int n) {
    if (x >= n - 1 && y >= n - 1) {
        vector<int> temp;
        visited[x][y] = 1;

        for(int i=0; i<n; i++) {
          for(int j=0; j<n; j++)
            temp.push_back(visited[i][j]);
        }

        visited[x][y] = 0;
        ans.push_back(temp);
        return; 
    }

    visited[x][y] = 1;

    
    // down
    int x1 = x + 1;
    int y1 = y;

    if (pathExist(m, visited, x1, y1, n)) {
        recursion(m, ans, visited, x1, y1, n);
    }

    // right
    x1 = x;
    y1 = y + 1;

    if (pathExist(m, visited, x1, y1, n)) {
        recursion(m, ans, visited, x1, y1, n);
    }

    // left
    x1 = x;
    y1 = y - 1;

    if (pathExist(m, visited, x1, y1, n)) {
        recursion(m, ans, visited, x1, y1, n);
    }

    // up
    x1 = x - 1;
    y1 = y;

    if (pathExist(m, visited, x1, y1, n)) {
        recursion(m, ans, visited, x1, y1, n);
    }

    visited[x][y] = 0;
}

vector<vector<int>> ratInAMaze(vector<vector<int>>& m, int n) {
    vector<vector<int>> ans;

    if (m[0][0] == 0) {
        return ans;
    }

    if (n == 1 && m[0][0] == 1) {
        ans.push_back({1});
        return ans;
    }

    vector<vector<int>> visited(n, vector<int>(n, 0));

    recursion(m, ans, visited, 0, 0, n);

    return ans;
}

