/*************************************************************

    Following is the Binary Tree node structure:

    class TreeNode
    {
    public:
        int data;
        TreeNode *left, *right;
        TreeNode() : data(0), left(NULL), right(NULL) {}
        TreeNode(int x) : data(x), left(NULL), right(NULL) {}
        TreeNode(int x, TreeNode *left, TreeNode *right) : data(x), left(left), right(right) {}
    };

*************************************************************/
void inorder(TreeNode* root, vector<int>& ans){

        if (root == NULL)
            return;

        inorder(root->left, ans);
        ans.push_back(root->data);
        inorder(root->right, ans);

}

 
vector<int> mergeBST(TreeNode *root1, TreeNode *root2)
{
    // Write your code here.

        vector<int> ans1, ans2; 
        inorder(root1, ans1);
        inorder(root2, ans2); 

        vector<int> ans(ans1.size()+ ans2.size());

        int i=0, j=0, k=0;

        while(i<ans1.size() && j<ans2.size()){

            if(ans1[i] < ans2[j]){
                ans[k++] = ans1[i++];
            }

            else{
                ans[k++] = ans2[j++];
            }
        }

        while(i<ans1.size()){
            ans[k++] = ans1[i++];
        }

        while(j<ans2.size()){
            ans[k++] = ans2[j++];
        }

        return ans;

}
